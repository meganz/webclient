/**
 *  Very simple class to measure speed
 *  of transference;
 *  @param {Function} tick      Function to update the stats generated by the class
 *  @param {Number} size        Total file size
 */
var SpeedMeter = function(tick, size) {

    this._tick     = tick;
    this._started  = new Date();
    this._totalSize = size || 0;
    this._samples  = [];
    this._progress = 0;
    this._timer    = null;
};

/**
 *  Updates file progress
 *
 *  @param {Number} bytes           Bytes processed by the client
 *  @param {Number|Null} totalSize  Updates the total size in bytes of the file
 */
SpeedMeter.prototype.progress = function(bytes, totalSize) {

    this._samples.push([bytes, new Date()]);
    if (typeof totalSize === "number") {
        this._totalSize = totalSize;
    }
    this._progress = bytes;
    this._setupTimer();
    this.update();
};


/**
 *  Returns the average speed
 *
 *  @param {Array} speeds   Speed samples over time
 *  @returns {Number}   Average speed
 */
SpeedMeter.prototype.avg = function(speeds) {

    var total = 0;
    for (var i = 0; i < speeds.length; ++i) {
        total += speeds[i][0] / Math.max(1, speeds[i][1] - this._started);
    }

    return total / speeds.length;
};

/**
 *  Updates the stats one last time because the file transference
 *  just finished.
 */
SpeedMeter.prototype.done = function() {

    this._progress = this._totalSize;
    this.update();
    clearInterval(this._timer);
};

/**
 *  Sends the notification with the new information
 *  of the avg speed
 */
SpeedMeter.prototype.update = function() {

    var data = this.getData();
    this._tick(data.speed, data.progress);
};

/**
 *  Returns the average speed and progress (percentage)
 *  of the transference.
 *  @returns {Object}
 */
SpeedMeter.prototype.getData = function() {

    var time = Math.max(new Date() - this._started, 1);
    var simpleSpeed = this._progress / time;
    var avgSpeed = this.avg(this._samples.slice(-5));
    return {
        speed: bytesToSize((simpleSpeed + avgSpeed) / 2 * 1000) + "/s",
        progress: parseInt(this._progress / this._totalSize * 100) + "%",
    };
};

/**
 *  Setups tick timer to update the transferences every second.
 */
SpeedMeter.prototype._setupTimer = function() {

    if (!this._timer) {
        this._timer = setInterval(this.update.bind(this), 1000);
    }
};

/**
 *  Returns the time in milliseconds since the
 *  transference begun.
 *  @returns {String}
 */
SpeedMeter.prototype.getTime = function() {

    return ((new Date()) - this._started) + "ms";
};

var NetworkTesting = (function() {
    var ns = {};
    var $dialog = $('.network-testing');
    var $input  = $dialog.find('input');
    var $btnTest = $dialog.find('.fm-dialog-new-folder-button');
    var $btnCancel = $dialog.find('.create-folder-button-cancel,.fm-dialog-close');
    var $table = $dialog.find('table');
    var data = {};
    var isPrivate = false;

    /**
     *  Closes the dialog
     */
    function closeDialog() {

        fm_hideoverlay();
        $dialog.addClass('hidden');
    }

    /**
     *  Initialises the speedtest objects
     */
    function speedtest(url, size) {

        var xhr = getxhr();
        var speed;
        var started = new Date();
        var hostname =  url.match(/https?:\/\/([^\/]+)/)[1];
        var ping = null;
        var failed = false;

        $table.removeClass('hidden');
        $table.find('.server').text(hostname);

        function updateSpeedData(speed, progress) {

            $table.find('.avg').text(speed);
            $table.find('.progress').text(progress);
        }

        xhr.onerror = function(ev) {
            failed = true;
            speedtest(url, size);
            xhr.abort();
        };

        xhr.onprogress = function(ev) {
            if (!$table.is(':visible')) {
                return xhr.abort();
            }
            speed.progress(ev.loaded,  ev.totalSize || null);
        };

        xhr.onreadystatechange = function() {
            if (failed) {
                return;
            }
            switch (this.readyState) {
            case this.HEADERS_RECEIVED:
                speed = new SpeedMeter(updateSpeedData, size);
                ping  = (new Date() - started) + "ms";
                $('.ping').text(ping);
                break;
            case this.DONE:
                speed.done();
                if (!$table.is(':visible')) {
                    return;
                }

                var length = bytesToSize(this.response.byteLength);
                window.onsupport = function onsupport($root) {
                    var select = $root.find('#support-subject');
                    select.find('.active').removeClass('active')
                        .end().find('span').text(
                            select.find('.default-dropdown-item').eq(4).addClass('active').text()
                        );

                    $root.find('textarea').val(
                        "Host: " +  hostname + "\n" +
                        "Ping time: " + ping +  "\n" +
                        "Speed: " + speed.getData().speed + "\n" +
                        "Data transferred: " + length
                    );
                };
                $btnTest.removeClass('disabled');
                $btnTest.find('span').text('Send');
                break;
            }
        };

        xhr.open('POST', url, true);
        xhr.responseType = have_ab ? 'arraybuffer' : 'text';
        xhr.send();
    }

    $btnCancel.click(closeDialog);
    $input.rebind("change keyup input", function(e) {
        var url   = $input.val();
        var parts = url.match(/#!([^!]{4,})/);

        if (!parts) {
            $btnTest.addClass('disabled');
        } else {
            $btnTest.removeClass('disabled');
        }

        if (e.which === 13) {
            $btnTest.trigger('click');
        }

    });
    $btnTest.rebind('click', function() {
        var url   = $input.val();
        var parts = url.match(/#!([^!]{4,})/);

        if (typeof window.onsupport === "function") {
            document.location = "#support";
            return;
        }

        if (!parts) {
            return;
        }

        $dialog.find('.instruction-message').addClass('hidden')
            .eq(1).removeClass('hidden');
        $input.parents('.fm-dialog-new-folder-input').addClass('hidden');
        $btnTest.addClass('disabled');

        var req = {
            a: 'gt',
            g: 1,
            ssl: use_ssl,
        };

        if (isPrivate) {
            req.n = parts[1];
        } else {
            req.p = parts[1];
        }

        api_req(req, {
            callback: function(res) {
                if (res === -9 && !isPrivate) {
                    isPrivate = true;
                    return $btnTest.trigger('click');
                }
                if (typeof res === "number") {
                    var msg = res === EACCESS ? l[243] : l[8807];

                    $dialog.addClass('hidden');
                    msgDialog('info', l[135], msg, null, function() {
                        // reset the dialog
                        ns.dialog();
                    });
                } else {
                    speedtest(res.g, 16 * 1024 * 1024);
                }
            },
        });

    });

    ns.dialog = function(id) {
        $dialog.removeClass('hidden');
        fm_showoverlay();
        window.onsupport = null;

        isPrivate = false;
        if (id !== undefined) {
            $input.val(id);
            return $btnTest.trigger('click');
        }

        // reset
        $dialog.find('.instruction-message').addClass('hidden')
            .eq(0).removeClass('hidden');
        $btnTest.find('span').text(l[9037]);
        $input.parents('.fm-dialog-new-folder-input').removeClass('hidden');
        $table.addClass('hidden');
        $input.val('');
        $input.focus();
    };

    return ns;
})();

